// Code generated by MockGen. DO NOT EDIT.
// Source: GolangCodeBase/Application/Common/Interfaces (interfaces: IRedis,ILogger)

// Package Mocks is a generated GoMock package.
package Mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockIRedis is a mock of IRedis interface.
type MockIRedis struct {
	ctrl     *gomock.Controller
	recorder *MockIRedisMockRecorder
}

// MockIRedisMockRecorder is the mock recorder for MockIRedis.
type MockIRedisMockRecorder struct {
	mock *MockIRedis
}

// NewMockIRedis creates a new mock instance.
func NewMockIRedis(ctrl *gomock.Controller) *MockIRedis {
	mock := &MockIRedis{ctrl: ctrl}
	mock.recorder = &MockIRedisMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRedis) EXPECT() *MockIRedisMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockIRedis) Publish(arg0 context.Context, arg1 string, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockIRedisMockRecorder) Publish(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockIRedis)(nil).Publish), arg0, arg1, arg2)
}

// Subscribe mocks base method.
func (m *MockIRedis) Subscribe(arg0 context.Context, arg1 string) <-chan string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", arg0, arg1)
	ret0, _ := ret[0].(<-chan string)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockIRedisMockRecorder) Subscribe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockIRedis)(nil).Subscribe), arg0, arg1)
}

// MockILogger is a mock of ILogger interface.
type MockILogger struct {
	ctrl     *gomock.Controller
	recorder *MockILoggerMockRecorder
}

// MockILoggerMockRecorder is the mock recorder for MockILogger.
type MockILoggerMockRecorder struct {
	mock *MockILogger
}

// NewMockILogger creates a new mock instance.
func NewMockILogger(ctrl *gomock.Controller) *MockILogger {
	mock := &MockILogger{ctrl: ctrl}
	mock.recorder = &MockILoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILogger) EXPECT() *MockILoggerMockRecorder {
	return m.recorder
}

// DPanic mocks base method.
func (m *MockILogger) DPanic(arg0 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "DPanic", varargs...)
}

// DPanic indicates an expected call of DPanic.
func (mr *MockILoggerMockRecorder) DPanic(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DPanic", reflect.TypeOf((*MockILogger)(nil).DPanic), arg0...)
}

// DPanicf mocks base method.
func (m *MockILogger) DPanicf(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "DPanicf", varargs...)
}

// DPanicf indicates an expected call of DPanicf.
func (mr *MockILoggerMockRecorder) DPanicf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DPanicf", reflect.TypeOf((*MockILogger)(nil).DPanicf), varargs...)
}

// Debug mocks base method.
func (m *MockILogger) Debug(arg0 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockILoggerMockRecorder) Debug(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockILogger)(nil).Debug), arg0...)
}

// Debugf mocks base method.
func (m *MockILogger) Debugf(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debugf", varargs...)
}

// Debugf indicates an expected call of Debugf.
func (mr *MockILoggerMockRecorder) Debugf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugf", reflect.TypeOf((*MockILogger)(nil).Debugf), varargs...)
}

// Err mocks base method.
func (m *MockILogger) Err(arg0 string, arg1 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Err", arg0, arg1)
}

// Err indicates an expected call of Err.
func (mr *MockILoggerMockRecorder) Err(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockILogger)(nil).Err), arg0, arg1)
}

// Error mocks base method.
func (m *MockILogger) Error(arg0 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockILoggerMockRecorder) Error(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockILogger)(nil).Error), arg0...)
}

// Errorf mocks base method.
func (m *MockILogger) Errorf(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Errorf", varargs...)
}

// Errorf indicates an expected call of Errorf.
func (mr *MockILoggerMockRecorder) Errorf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorf", reflect.TypeOf((*MockILogger)(nil).Errorf), varargs...)
}

// Fatal mocks base method.
func (m *MockILogger) Fatal(arg0 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatal", varargs...)
}

// Fatal indicates an expected call of Fatal.
func (mr *MockILoggerMockRecorder) Fatal(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockILogger)(nil).Fatal), arg0...)
}

// Fatalf mocks base method.
func (m *MockILogger) Fatalf(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Fatalf", varargs...)
}

// Fatalf indicates an expected call of Fatalf.
func (mr *MockILoggerMockRecorder) Fatalf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatalf", reflect.TypeOf((*MockILogger)(nil).Fatalf), varargs...)
}

// GrpcClientInterceptorLogger mocks base method.
func (m *MockILogger) GrpcClientInterceptorLogger(arg0 string, arg1, arg2 interface{}, arg3 time.Duration, arg4 map[string][]string, arg5 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GrpcClientInterceptorLogger", arg0, arg1, arg2, arg3, arg4, arg5)
}

// GrpcClientInterceptorLogger indicates an expected call of GrpcClientInterceptorLogger.
func (mr *MockILoggerMockRecorder) GrpcClientInterceptorLogger(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrpcClientInterceptorLogger", reflect.TypeOf((*MockILogger)(nil).GrpcClientInterceptorLogger), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GrpcClientInterceptorLoggerErr mocks base method.
func (m *MockILogger) GrpcClientInterceptorLoggerErr(arg0 string, arg1, arg2 interface{}, arg3 time.Duration, arg4 map[string][]string, arg5 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GrpcClientInterceptorLoggerErr", arg0, arg1, arg2, arg3, arg4, arg5)
}

// GrpcClientInterceptorLoggerErr indicates an expected call of GrpcClientInterceptorLoggerErr.
func (mr *MockILoggerMockRecorder) GrpcClientInterceptorLoggerErr(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrpcClientInterceptorLoggerErr", reflect.TypeOf((*MockILogger)(nil).GrpcClientInterceptorLoggerErr), arg0, arg1, arg2, arg3, arg4, arg5)
}

// GrpcMiddlewareAccessLogger mocks base method.
func (m *MockILogger) GrpcMiddlewareAccessLogger(arg0 string, arg1 time.Duration, arg2 map[string][]string, arg3 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GrpcMiddlewareAccessLogger", arg0, arg1, arg2, arg3)
}

// GrpcMiddlewareAccessLogger indicates an expected call of GrpcMiddlewareAccessLogger.
func (mr *MockILoggerMockRecorder) GrpcMiddlewareAccessLogger(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrpcMiddlewareAccessLogger", reflect.TypeOf((*MockILogger)(nil).GrpcMiddlewareAccessLogger), arg0, arg1, arg2, arg3)
}

// GrpcMiddlewareAccessLoggerErr mocks base method.
func (m *MockILogger) GrpcMiddlewareAccessLoggerErr(arg0 string, arg1 time.Duration, arg2 map[string][]string, arg3 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GrpcMiddlewareAccessLoggerErr", arg0, arg1, arg2, arg3)
}

// GrpcMiddlewareAccessLoggerErr indicates an expected call of GrpcMiddlewareAccessLoggerErr.
func (mr *MockILoggerMockRecorder) GrpcMiddlewareAccessLoggerErr(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrpcMiddlewareAccessLoggerErr", reflect.TypeOf((*MockILogger)(nil).GrpcMiddlewareAccessLoggerErr), arg0, arg1, arg2, arg3)
}

// HttpMiddlewareAccessLogger mocks base method.
func (m *MockILogger) HttpMiddlewareAccessLogger(arg0, arg1 string, arg2 int, arg3 int64, arg4 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HttpMiddlewareAccessLogger", arg0, arg1, arg2, arg3, arg4)
}

// HttpMiddlewareAccessLogger indicates an expected call of HttpMiddlewareAccessLogger.
func (mr *MockILoggerMockRecorder) HttpMiddlewareAccessLogger(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HttpMiddlewareAccessLogger", reflect.TypeOf((*MockILogger)(nil).HttpMiddlewareAccessLogger), arg0, arg1, arg2, arg3, arg4)
}

// Info mocks base method.
func (m *MockILogger) Info(arg0 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockILoggerMockRecorder) Info(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockILogger)(nil).Info), arg0...)
}

// Infof mocks base method.
func (m *MockILogger) Infof(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Infof", varargs...)
}

// Infof indicates an expected call of Infof.
func (mr *MockILoggerMockRecorder) Infof(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Infof", reflect.TypeOf((*MockILogger)(nil).Infof), varargs...)
}

// KafkaLogCommittedMessage mocks base method.
func (m *MockILogger) KafkaLogCommittedMessage(arg0 string, arg1 int, arg2 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "KafkaLogCommittedMessage", arg0, arg1, arg2)
}

// KafkaLogCommittedMessage indicates an expected call of KafkaLogCommittedMessage.
func (mr *MockILoggerMockRecorder) KafkaLogCommittedMessage(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KafkaLogCommittedMessage", reflect.TypeOf((*MockILogger)(nil).KafkaLogCommittedMessage), arg0, arg1, arg2)
}

// KafkaProcessMessage mocks base method.
func (m *MockILogger) KafkaProcessMessage(arg0 string, arg1 int, arg2 []byte, arg3 int, arg4 int64, arg5 time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "KafkaProcessMessage", arg0, arg1, arg2, arg3, arg4, arg5)
}

// KafkaProcessMessage indicates an expected call of KafkaProcessMessage.
func (mr *MockILoggerMockRecorder) KafkaProcessMessage(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KafkaProcessMessage", reflect.TypeOf((*MockILogger)(nil).KafkaProcessMessage), arg0, arg1, arg2, arg3, arg4, arg5)
}

// KafkaProcessMessageWithHeaders mocks base method.
func (m *MockILogger) KafkaProcessMessageWithHeaders(arg0 string, arg1 int, arg2 []byte, arg3 int, arg4 int64, arg5 time.Time, arg6 map[string]interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "KafkaProcessMessageWithHeaders", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// KafkaProcessMessageWithHeaders indicates an expected call of KafkaProcessMessageWithHeaders.
func (mr *MockILoggerMockRecorder) KafkaProcessMessageWithHeaders(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KafkaProcessMessageWithHeaders", reflect.TypeOf((*MockILogger)(nil).KafkaProcessMessageWithHeaders), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// Named mocks base method.
func (m *MockILogger) Named(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Named", arg0)
}

// Named indicates an expected call of Named.
func (mr *MockILoggerMockRecorder) Named(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Named", reflect.TypeOf((*MockILogger)(nil).Named), arg0)
}

// Printf mocks base method.
func (m *MockILogger) Printf(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Printf", varargs...)
}

// Printf indicates an expected call of Printf.
func (mr *MockILoggerMockRecorder) Printf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Printf", reflect.TypeOf((*MockILogger)(nil).Printf), varargs...)
}

// Warn mocks base method.
func (m *MockILogger) Warn(arg0 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockILoggerMockRecorder) Warn(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockILogger)(nil).Warn), arg0...)
}

// WarnErrMsg mocks base method.
func (m *MockILogger) WarnErrMsg(arg0 string, arg1 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WarnErrMsg", arg0, arg1)
}

// WarnErrMsg indicates an expected call of WarnErrMsg.
func (mr *MockILoggerMockRecorder) WarnErrMsg(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WarnErrMsg", reflect.TypeOf((*MockILogger)(nil).WarnErrMsg), arg0, arg1)
}

// Warnf mocks base method.
func (m *MockILogger) Warnf(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warnf", varargs...)
}

// Warnf indicates an expected call of Warnf.
func (mr *MockILoggerMockRecorder) Warnf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warnf", reflect.TypeOf((*MockILogger)(nil).Warnf), varargs...)
}
