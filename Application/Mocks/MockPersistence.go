// Code generated by MockGen. DO NOT EDIT.
// Source: GolangCodeBase/Application/Common/Interfaces (interfaces: IUnitOfWork,IOrderRepository)

// Package Mocks is a generated GoMock package.
package Mocks

import (
	Interfaces "GolangCodeBase/Application/Common/Interfaces"
	Entities "GolangCodeBase/Domain/Entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIUnitOfWork is a mock of IUnitOfWork interface.
type MockIUnitOfWork struct {
	ctrl     *gomock.Controller
	recorder *MockIUnitOfWorkMockRecorder
}

// MockIUnitOfWorkMockRecorder is the mock recorder for MockIUnitOfWork.
type MockIUnitOfWorkMockRecorder struct {
	mock *MockIUnitOfWork
}

// NewMockIUnitOfWork creates a new mock instance.
func NewMockIUnitOfWork(ctrl *gomock.Controller) *MockIUnitOfWork {
	mock := &MockIUnitOfWork{ctrl: ctrl}
	mock.recorder = &MockIUnitOfWorkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUnitOfWork) EXPECT() *MockIUnitOfWorkMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockIUnitOfWork) Do(arg0 Interfaces.UnitOfWorkBlock) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MockIUnitOfWorkMockRecorder) Do(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockIUnitOfWork)(nil).Do), arg0)
}

// OrderRepository mocks base method.
func (m *MockIUnitOfWork) OrderRepository() Interfaces.IOrderRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderRepository")
	ret0, _ := ret[0].(Interfaces.IOrderRepository)
	return ret0
}

// OrderRepository indicates an expected call of OrderRepository.
func (mr *MockIUnitOfWorkMockRecorder) OrderRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderRepository", reflect.TypeOf((*MockIUnitOfWork)(nil).OrderRepository))
}

// MockIOrderRepository is a mock of IOrderRepository interface.
type MockIOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIOrderRepositoryMockRecorder
}

// MockIOrderRepositoryMockRecorder is the mock recorder for MockIOrderRepository.
type MockIOrderRepositoryMockRecorder struct {
	mock *MockIOrderRepository
}

// NewMockIOrderRepository creates a new mock instance.
func NewMockIOrderRepository(ctrl *gomock.Controller) *MockIOrderRepository {
	mock := &MockIOrderRepository{ctrl: ctrl}
	mock.recorder = &MockIOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOrderRepository) EXPECT() *MockIOrderRepositoryMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockIOrderRepository) Add(arg0 Entities.OrderEntity) Entities.OrderEntity {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(Entities.OrderEntity)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockIOrderRepositoryMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockIOrderRepository)(nil).Add), arg0)
}

// Find mocks base method.
func (m *MockIOrderRepository) Find() Entities.OrderEntity {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find")
	ret0, _ := ret[0].(Entities.OrderEntity)
	return ret0
}

// Find indicates an expected call of Find.
func (mr *MockIOrderRepositoryMockRecorder) Find() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockIOrderRepository)(nil).Find))
}
